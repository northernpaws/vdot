name: Main

on:
  push:
    paths-ignore:
      - '.gitignore'
      - '*.md'

jobs:
  lint:
    name: üßπ Lint / üìú C++
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format style check
        uses: jidicula/clang-format-action@v4.9.0
        with:
          clang-format-version: '15'
          exclude-regex: 'extern'

  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: ['Debug', 'Release']
        config:
          - { name: 'üçè macOS Clang', os: macos-latest, platform: mac }
          - { name: 'üêß Linux GCC', os: ubuntu-latest, platform: linux }
          # Live2D SDK requires MSVC 2022 at the newest, but the windows-2022 image has MSVC > 1940 limit, so we use 2019.
          # https://github.com/actions/runner-images/blob/main/images/windows/Windows2019-Readme.md
          - { name: 'ü™ü Windows MSVC', os: windows-2019, platform: windows }

    name: üõ† Build / ${{ matrix.config.name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.config.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: brew install ccache ninja

      - name: Install Dependencies (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache ninja-build

      - name: Install Dependencies (Windows)
        if: matrix.config.os == 'windows-2019'
        run: |
          choco upgrade ccache ninja

      - name: Setup MSVC (Windows)
        if: matrix.config.os == 'windows-2019'
        uses: ilammy/msvc-dev-cmd@v1

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: '10G'
          key: ${{ matrix.config.os }}-${{ matrix.build_type }}

      - name: CMake Configure
        run: >
          mkdir GDExtension-build

          cmake
          -B GDExtension-build
          -G "Ninja"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          --install-prefix ${{ github.workspace }}/install-${{ matrix.build_type }}
          .

      # Build the GDExtension containing the C++ sources.
      - name: CMake Build
        run: cmake --build GDExtension-build

      # Install the GDExtension files into the `project/` directory.
      - name: CMake Install
        run: cmake --install GDExtension-build

      - name: Upload GDExtension artifact (Debug)
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: gdextension-Debug-${{ matrix.config.platform }}
          path: |
            ${{ github.workspace }}/install-${{ matrix.build_type }}/*

      - name: Upload GDExtension artifact (Release)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: gdextension-Release-${{ matrix.config.platform }}
          path: |
            ${{ github.workspace }}/install-${{ matrix.build_type }}/*

  bundle:
    needs: build

    strategy:
      fail-fast: false
      matrix:
        build_type: [ 'Debug', 'Release' ]

    name: üñ•Ô∏è Bundle GDExtension (${{ matrix.build_type }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # Retrieve the GDExtension build artifacts from the `build` step.
      - uses: actions/download-artifact@v4
        with:
          # Retrieve all platforms, and merge them into a directory so that all the binaries are available.
          pattern: gdextension-${{ matrix.build_type }}-*
          path: project/addons
          merge-multiple: true

      - name: Display structure of repository
        run: ls

      - name: Display structure of project
        run: ls -R project

      - name: Upload Client artifact (${{ matrix.build_type }})
        uses: actions/upload-artifact@v4
        with:
          name: GDExtension (${{ matrix.build_type }})
          path: project/addons/vdot

  client:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: ['Debug', 'Release']
        config:
          - { name: 'üçè macOS Clang', platform: mac }
          - { name: 'üêß Linux GCC', platform: linux }
          - { name: 'ü™ü Windows MSVC', platform: windows }
    name: üñ•Ô∏è Client / ${{ matrix.config.name }} (${{ matrix.build_type }})

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          lfs: true

      # Retrieve the platform-specific GDExtension build from the `build` step.
      - uses: actions/download-artifact@v4
        with:
          #name: gdextension-${{ matrix.config.platform }}
          pattern: gdextension-*
          path: project/addons
          merge-multiple: true

      - name: Display structure of repository
        run: ls

      - name: Display structure of project
        run: ls -R project

      - name: Godot Build (Debug)
        if: matrix.build_type == 'Debug'
        id: godot-debug
        # ref: https://github.com/yeslayla/build-godot-action/issues/32
        uses: felix-schindler/build-godot-action@v2.0.0
        with:
          name: vdot
          preset: ${{ matrix.config.platform }}
          debugMode: "true"
          projectDir: project

      - name: Godot Build (Release)
        if: matrix.build_type == 'Release'
        id: godot-release
        # ref: https://github.com/yeslayla/build-godot-action/issues/32
        uses: felix-schindler/build-godot-action@v2.0.0
        with:
          preset: ${{ matrix.config.platform }}
          debugMode: "false"
          projectDir: "project"
          package: "true"

      - name: Upload Client artifact (Debug)
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: Client - ${{ matrix.config.platform }}
          path: ${{ github.workspace }}/${{ steps.godot-debug.outputs.artifact }}

      - name: Upload Client artifact (Release)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: Client - ${{ matrix.config.platform }}
          path: ${{ github.workspace }}/${{ steps.godot-release.outputs.artifact }}